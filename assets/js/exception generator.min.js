function createException(t,e,d,i){let o=i.ImportExportXml.SolutionManifest.UniqueName,a=i.ImportExportXml.SolutionManifest.Version,l=i.ImportExportXml.SolutionManifest.Publisher.UniqueName,n='<table class="mui-table mui-table--bordered" id="flowTable" ><thead><tr><th>Flow</th><th>Trigger</th><th>Complexity</th><th>Fails</th><th>Warnings</th></tr></thead><tbody>',r='<table class="mui-table mui-table--bordered" id="exceptionTable" ><thead><tr><th  style="width:200px">Flow</th><th>Area</th><th>Value</th><th  style="width:70px">Level</th><th>Failed Reason</th></tr></thead><tbody>';if(null!=i?.ImportExportXml?.SolutionManifest?.MissingDependencies?.MissingDependency){let t=i.ImportExportXml.SolutionManifest.MissingDependencies.MissingDependency,e=[];if(t){let d=[];Array.isArray(t)?d=t:d.push(t),d.forEach((t=>{e.includes(t.Required.displayName)||(r+="<tr><td>Solution</td><td>Missing Dependency</td><td>"+t.Required.displayName+"</td><td>Fail</td><td>Add component type "+t.Required.type+" to the solution </td></tr>",e.push(t.Required.displayName))}))}}return t.forEach((t=>{let d=0,i=0,o=t.name;t.complexity>oRatings.complexityRe?(r+="<tr><td>"+o+"</td><td>Complexity</td><td>"+t.complexity+"</td><td>Warning</td><td>Overly complex flow, should be below: "+oRatings.complexityAm+"</td></tr>",d++):t.complexity>oRatings.complexityAm&&(r+="<tr><td>"+o+"</td><td>Complexity</td><td>"+t.complexity+"</td><td>Fail</td><td>Overly complex flow, should be below: "+oRatings.complexityAm+"</td></tr>",i++),t.steps>oRatings.actionRe?(r+="<tr><td>"+o+"</td><td>Steps</td><td>"+t.steps+"</td><td>Warning</td><td>Too many step/actions within the flow, should be below: "+oRatings.actionsAm+"</td></tr>",d++):t.steps>oRatings.actionsAm&&(r+="<tr><td>"+o+"</td><td>Steps</td><td>"+t.steps+"</td><td>Fail</td><td>Too many step/actions within the flow, should be below: "+oRatings.actionsAm+"</td></tr>",i++),t.variables>oRatings.variablesRe?(r+="<tr><td>"+o+"</td><td>Variables</td><td>"+t.variables+"</td><td>Warning</td><td>Too many variables within the flow, should be below: "+oRatings.variablesAm+"</td></tr>",d++):t.variables>oRatings.variablesAm&&(r+="<tr><td>"+o+"</td><td>Variables</td><td>"+t.variables+"</td><td>Fail</td><td>Too many variables within the flow, should be below: "+oRatings.variablesAm+"</td></tr>",i++),t.exception<=oRatings.exceptionsRe?(r+="<tr><td>"+o+"</td><td>Exception Handler</td><td>"+t.exception+"</td><td>Warning</td><td>Should have minimum one exception (runAfter:Failed): "+oRatings.exceptionsRe+"</td></tr>",d++):t.exception<oRatings.exceptions&&(r+="<tr><td>"+o+"</td><td>Exception Handler</td><td>"+t.exception+"</td><td>Fail</td><td>Should have minimum one exception (runAfter:Failed): "+oRatings.exceptionsRe+"</td></tr>",i++);let a=t.variableArray.filter((t=>!t.used));a.forEach((t=>{r+="<tr><td>"+o+"</td><td>Variable</td><td>"+t.name+"</td><td>Fail</td><td>All variables should be set at least once</td></tr>",i++})),a=t.variableArray.filter((t=>!t.named)),a.forEach((t=>{r+="<tr><td>"+o+"</td><td>Variable</td><td>"+t.name+" => "+t.type+"</td><td>Fail</td><td>Not following naming convention, should follow: "+JSON.stringify(e)+"</td></tr>",i++})),t.composes>2&&(r+="<tr><td>"+o+"</td><td>Composes</td><td>"+t.composes+"</td><td>Fail</td><td>Composes should only be used by rare exception, with maximum 1 recommended</td></tr>",i++),t.mainScope||(r+="<tr><td>"+o+"</td><td>Top Level Main Scope</td><td>False</td><td>Fail</td><td>A Scope named Main should contain all actions to enable exception catching</td></tr>",i++),t.exceptionScope||(r+="<tr><td>"+o+"</td><td>Exception Scope Following Main Scope </td><td>False</td><td>Fail</td><td>A Scope should runAfter: failed from Main scope</td></tr>",i++),t.exceptionHandleScope||(r+="<tr><td>"+o+"</td><td>Exception Scope Named </td><td>False</td><td>Fail</td><td>Scope named Exception should runAfter: failed from Main scope</td></tr>",i++),t.exceptionArray.filter((t=>!t.runAfter.includes("TimedOut"))).forEach((t=>{r+="<tr><td>"+o+"</td><td>Exception Handling TimedOut</td><td>"+t.name+"</td><td>Fail</td><td>All runAfter: failed should also include TimedOut</td></tr>",i++}));let l=t.apiActionArray.filter((t=>""==t.filter&&"GetItems"==t.step));l.forEach((t=>{r+="<tr><td>"+o+"</td><td>Get Items Settings</td><td>"+t.name+"</td><td>Warning</td><td>Get Items without filter query</td></tr>",d++})),l=t.apiActionArray.filter((t=>""==t.pagination&&("GetItems"==t.step||t.step.includes("ListMyTasks")))),l.forEach((t=>{r+="<tr><td>"+o+"</td><td>Get Items Settings</td><td>"+t.name+"</td><td>Warning</td><td>Get Items without pagination turned on</td></tr>",d++})),n+="<tr><td>"+o+"</td><td>"+t.trigger+"</td><td>"+t.complexity+"</td><td>"+i+"</td><td>"+d+"</td><tr>"})),n+="</table>",r+="</table>",d=(d=(d=(d=(d=(d=d.replace("{flowName}",o)).replace("{flowId}",a)).replace("{owner}",l)).replace("{date}",getToday())).replace("{flowsTable}",n)).replace("{exceptionsTable}",r)}